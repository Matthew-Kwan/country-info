{"version":3,"sources":["components/Search.js","components/Show.js","components/Info.js","components/Country.js","App.js","serviceWorker.js","index.js"],"names":["Search","search","handler","value","onChange","Show","name","setSearch","onClick","Info","country","useState","weather","setWeather","useEffect","params","access_key","process","query","axios","get","then","response","console","log","data","current","catch","error","capital","population","languages","map","x","src","flag","alt","temperature","weather_icons","wind_speed","wind_dir","Country","countries","searchLength","length","countryNames","filter","slice","toLowerCase","App","setCountries","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+OAceA,G,MAXA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAGrB,OACI,8BACI,iDAAmB,uBAAOC,MAAOF,EAAQG,SAAUF,IAAnD,WCSGG,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAQjB,OACI,wBAAQC,QALY,WACnBD,EAAUD,IAIX,uBC0COG,EAlDF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EAEMC,mBAAS,IAFf,mBAEjBC,EAFiB,KAERC,EAFQ,KAgCxB,OALAC,qBAtBY,WACR,IAKMC,EAAS,CACXC,WANYC,mCAOZC,MAAOR,EAAQJ,MAGnBa,IACKC,IAAI,sCAAuC,CAACL,WAC5CM,MAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZT,EAAWS,EAASG,KAAKC,YAE1BC,OAAM,SAAAC,GACLL,QAAQC,IAAII,QAIT,IAMX,gCACI,wCAAWlB,EAAQJ,KAAnB,OACA,2CAAcI,EAAQmB,QAAtB,OACA,8CAAiBnB,EAAQoB,WAAzB,OACA,6CAAgBpB,EAAQqB,UAAUC,KAAI,SAAAC,GAAC,OAAIA,EAAE3B,KAAO,OAApD,OACA,qBAAK4B,IAAKxB,EAAQyB,KAAMC,IAAI,SALhC,IAKyC,uBACrC,mDACA,+CAAkBxB,EAAQyB,YAA1B,OACA,qBAAKH,IAAKtB,EAAQ0B,cAAeF,IAAI,oBACrC,wCAAWxB,EAAQ2B,WAAnB,QAAoC3B,EAAQ4B,SAA5C,WCFGC,EAvCC,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,UAAWzC,EAAuB,EAAvBA,OAAQM,EAAe,EAAfA,UAG7BoC,EAAe1C,EAAO2C,OACtBC,EAAeH,EAAUI,QAAO,SAAAb,GAAC,OAAIA,EAAE3B,KAAKyC,MAAM,EAAEJ,GAAcK,gBAAgB/C,EAAO+C,iBAK7F,OAAIH,EAAaD,OAAS,IAAe,KAAT3C,EAExB,8BACI,2FAID4C,EAAaD,QAAU,IAAMC,EAAaD,OAAQ,EAErD,8BACKC,EAAab,KAAI,SAAAC,GAAC,OAAE,kCAAkBA,EAAE3B,KAApB,IAA0B,cAAC,EAAD,CAAMA,KAAM2B,EAAE3B,KAAMC,UAAWA,IAAzD,MAAQ0B,EAAE3B,WAGR,IAAxBuC,EAAaD,OAGhB,cAAC,EAAD,CAAMlC,QAASmC,EAAa,KAI5B,8BACI,uDCIDI,MA/Bf,WAAe,MAGetC,mBAAS,IAHxB,mBAGNV,EAHM,KAGEM,EAHF,OAIqBI,mBAAS,IAJ9B,mBAIN+B,EAJM,KAIKQ,EAJL,KAuBb,OARApC,qBARa,WACXK,IACGC,IAAI,wCACJC,MAAK,SAAAC,GACJ4B,EAAa5B,EAASG,WAIb,IASb,gCACE,cAAC,EAAD,CAAQxB,OAAQA,EAAQC,QAND,SAACiD,GAC1B5C,EAAU4C,EAAEC,OAAOjD,UAMjB,cAAC,EAAD,CAASuC,UAAWA,EAAWzC,OAAQA,EAAQM,UAAWA,QCrB5C8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMwC,c","file":"static/js/main.eae1d1a5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Search = ({search, handler}) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <p> find countries <input value={search} onChange={handler}></input> </p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Search","import React from 'react' \r\n\r\nconst Show = ({name, setSearch}) => {\r\n\r\n    // event handlers \r\n\r\n    const handleShowClick = () => {\r\n         setSearch(name)\r\n    }\r\n\r\n    return (\r\n        <button onClick={handleShowClick}>Show me </button> \r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default Show;","import React, {useState,useEffect} from 'react' \r\nimport axios from 'axios'\r\n\r\nconst Info = ({country}) => {\r\n\r\n    const [weather, setWeather] = useState({})\r\n\r\n    // [START API CALL] Weatherstack\r\n    const hook= () => {\r\n        const api_key = process.env.REACT_APP_API_KEY\r\n        //debug for \r\n        //console.log('API_KEY: ', api_key)\r\n\r\n        // Set up axios call \r\n        const params = {\r\n            access_key: api_key,\r\n            query: country.name\r\n          }\r\n\r\n        axios\r\n            .get('http://api.weatherstack.com/current', {params})\r\n            .then( response => {\r\n                console.log(response)\r\n                setWeather(response.data.current)\r\n                \r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        \r\n    } \r\n    useEffect(hook,[])\r\n    // [END API CALL] Weatherstack\r\n\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <p> Name: {country.name} </p>\r\n            <p> Capital: {country.capital} </p>\r\n            <p> Population: {country.population} </p>\r\n            <p> Languages: {country.languages.map(x => x.name + ' ')} </p>\r\n            <img src={country.flag} alt='flag'/> <br></br>\r\n            <h1> Current Weather </h1>\r\n            <p> Temperature: {weather.temperature} </p>\r\n            <img src={weather.weather_icons} alt='current_weather'/>\r\n            <p> wind: {weather.wind_speed} mph {weather.wind_dir} </p>\r\n        </div>\r\n    ) \r\n}\r\n\r\n\r\n\r\n\r\nexport default Info ","import React from 'react' \r\nimport Show from './Show.js'\r\nimport Info from './Info.js'\r\n\r\nconst Country = ({countries, search, setSearch}) => {\r\n\r\n    // evaluate the number of countries that match the search \r\n    let searchLength = search.length \r\n    let countryNames = countries.filter(x => x.name.slice(0,searchLength).toLowerCase()===search.toLowerCase())\r\n\r\n    // event handler\r\n\r\n    // if the number of countries that match the search is greater than 10 \r\n    if (countryNames.length > 10 && search!==\"\") {\r\n        return (\r\n            <div>\r\n                <p>Too many results returned, please enter more characters!</p>\r\n            </div>\r\n        )\r\n\r\n    } else if (countryNames.length <= 10 && countryNames.length >1) {\r\n        return (\r\n            <div>\r\n                {countryNames.map(x=><p key={x.name}> {x.name} <Show name={x.name} setSearch={setSearch}/> </p>)}\r\n            </div>\r\n        )\r\n    } else if (countryNames.length === 1) {\r\n        return (\r\n\r\n            <Info country={countryNames[0]}/>\r\n        )\r\n    } else {\r\n        return ( \r\n            <div>\r\n                <p> No Matches Found! </p>\r\n            </div>\r\n        )\r\n    }     \r\n\r\n}\r\n\r\n\r\n\r\nexport default Country ","import React, { useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Search from './components/Search'\r\nimport Country from './components/Country'\r\n\r\n\r\nfunction App() {\r\n\r\n  // Define states \r\n  const [search, setSearch] = useState('')\r\n  const [countries, setCountries] = useState([])\r\n\r\n  // [START API CALL] Country API \r\n  const hook = () => {\r\n    axios\r\n      .get('https://restcountries.eu/rest/v2/all')\r\n      .then(response => {\r\n        setCountries(response.data)\r\n      })\r\n  }\r\n\r\n  useEffect(hook,[])\r\n  // [END API CALL] Country API\r\n\r\n  // Event Handlers \r\n  const handleSearchChange = (e) => {\r\n    setSearch(e.target.value) \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Search search={search} handler={handleSearchChange}/>\r\n      <Country countries={countries} search={search} setSearch={setSearch}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}